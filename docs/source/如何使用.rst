如何使用
===================================


1. 安装gotrackit
--------------------

安装前确保python环境中有以下前置依赖库

括号中为作者使用版本(基于python3.11)，仅供参考

* geopandas(0.14.1)

* gdal(3.4.3)

* networkx(3.2.1)

* shapely(2.0.2)

* pandas(2.0.3)

* numpy(1.26.2)

* pyproj(3.6.1)

* keplergl(0.3.2)


geopandas为最新版本, 如果不是最新版本可能会报错(有个函数旧版本没有)

使用pip安装 ::

    pip install gotrackit





2. 算法包概览
--------------------
包括了三个模块：数据生产、地图匹配和可视化。


2.1. GPS数据生产
````````````````
该模块依托路网文件模拟车辆行驶并且产生GPS数据，当用户没有实际的GPS数据时可以借助该模块生产数据。


2.2. 地图匹配
`````````````
依托路网文件、GPS数据，对GPS数据进行地图匹配，匹配结果给出每个GPS点实际匹配路段信息。


2.3. kepler可视化
```````````````````````
依托匹配结果生产HTML文件，用户可以使用浏览器打开该文件播放匹配动画。


3. 生产GPS数据
--------------------

3.1. 输入数据
`````````````
(1) 路网-点层
'''''''''''''

路网点层文件字段要求如下：

.. csv-table:: 节点层字段说明
    :header: "字段名称", "字段类型", "字段说明"
    :widths: 15, 15, 40

    "node_id","int","节点唯一编码"
    "geometry","geometry","节点坐标几何列"
    "其他非必需字段","...","..."

样例数据如下：

.. csv-table:: 节点样例数据
    :header: "node_id", "geometry"
    :widths: 15, 15

    "12","Point()"
    "12","Point()"
    "12","Point()"
    "12","Point()"
    "12","Point()"

(2) 路网-线层
'''''''''''''

路网线层文件字段要求如下：

.. csv-table:: 线层字段说明
    :header: "字段名称", "字段类型", "字段说明"
    :widths: 15, 15, 40

    "link_id","int","路段唯一编码"
    "from_node","int","路段拓扑起点节点编号"
    "to_node","int","路段拓扑终点节点编号"
    "dir","int","路段方向，取值为0或者1， 0代表双向通行，1代表通行方向为路段拓扑正向"
    "length","float","路段长度，单位米"
    "geometry","geometry","路段几何线型"
    "其他非必需字段","...","..."

样例数据如下：

.. csv-table:: 线层样例数据
    :header: "node_id", "geometry"
    :widths: 15, 15

    "12","Point()"
    "12","Point()"
    "12","Point()"
    "12","Point()"
    "12","Point()"


(3) GPS数据
'''''''''''''


3.2. 输入数据
`````````````

3.3. 代码示例
`````````````

.. code-block:: python
    :linenos:

    import pandas as pd


4. 从路径规划接口获取路网
-------------------------


5. 地图匹配
----------------------------


5. 匹配结果可视化
----------------------------