如何使用
===================================


1. 安装gotrackit
--------------------

安装前确保python环境中有以下前置依赖库，括号中为作者使用版本(基于python3.11)，仅供参考

* geopandas(0.14.1)

* gdal(3.4.3)

* networkx(3.2.1)

* shapely(2.0.2)

* pandas(2.0.3)

* numpy(1.26.2)

* pyproj(3.6.1)

* keplergl(0.3.2)


geopandas为最新版本, 如果不是最新版本可能会报错(有个函数旧版本没有)

使用pip安装 ::

    pip install -i https://pypi.org/simple/ gotrackit





2. 算法包概览
--------------------

2.1. 模块概览
````````````````
包括了三个模块：GPS数据生产、地图匹配 和 匹配过程可视化。


2.1.1. GPS数据生产
::::::::::::::::::::::::::
该模块依托路网文件模拟车辆行驶并且产生GPS数据，当用户没有实际的GPS数据时可以借助该模块生产数据。


基本流程为：

.. image:: images/GpsGenGraph.png
    :align: center

----------------------------------------

具体的代码实操见下文示例代码。



2.1.2. 地图匹配
::::::::::::::::::::::::::

依托路网文件、GPS数据，对GPS数据进行地图匹配，匹配结果给出每个GPS点实际匹配路段信息。

基本流程为：

.. image:: images/MatchGraph.png
    :align: center

----------------------------------------

具体的代码实操见下文示例代码。



2.1.3. kepler可视化
::::::::::::::::::::::::::


将匹配结果统一输出到HTML文件，用户可以使用浏览器打开该文件播放匹配动画。

基本流程为：

.. image:: images/visualization.png
    :align: center

----------------------------------------

具体的代码实操见下文示例代码。

2.2. 数据要求
````````````````

这三个模块所涉及的数据说明如下：

2.2.1. 路网数据
::::::::::::::::::::::::::
路网由线层文件和点层文件组成，两个文件存在关联关系。`西安样例路网 <https://github.com/zdsjjtTLG/TrackIt/tree/main/data/input/net/xian>`_


(1) 路网-点层
'''''''''''''

路网点层文件字段要求如下：

.. csv-table:: 节点层字段说明
    :header: "字段名称", "字段类型", "字段说明"
    :widths: 15, 15, 40

    "node_id","int","节点唯一编码"
    "geometry","geometry","节点坐标几何列"
    "其他非必需字段","...","..."

样例数据如下：

.. csv-table:: 节点样例数据
    :header: "node_id", "geometry"
    :widths: 3, 20

    "4290","POINT (108.84059274796762 34.20380728755708)"
    "7449","POINT (108.83996876020116 34.20398312458892)"
    "19893","POINT (108.8410333043887 34.20538952458989)"
    "22765","POINT (108.8396462868452 34.20358068920948)"
    "29974","POINT (108.84304743483109 34.20477124733548)"
    "31762","POINT (108.84007099594207 34.20303962600771)"
    "34152","POINT (108.84337595161946 34.20450390550994)"
    "44441","POINT (108.8435151462407 34.204686083275455)"
    "63637","POINT (108.8415703783543 34.20233450491169)"
    "68869","POINT (108.842021912175 34.20431362229388)"
    "82793","POINT (108.84178453991281 34.204420171642816)"
    "91199","POINT (108.84129068661863 34.20558291058989)"
    "92706","POINT (108.84207500541686 34.2041637658475)"
    "118381","POINT (108.84208596575294 34.20486654570958)"
    "122487","POINT (108.84210722600966 34.20202954576994)"
    "124862","POINT (108.83952308374874 34.20369843029777)"
    "145105","POINT (108.84239758378014 34.20309169152201)"
    "166381","POINT (108.84139277469502 34.20644679433629)"
    "169462","POINT (108.84160833213731 34.20363712972413)"
    "170508","POINT (108.841425074665 34.203330912749905)"
    "177594","POINT (108.84176365682967 34.202564765029564)"
    "181808","POINT (108.84049555540867 34.20432194107051)"
    "191714","POINT (108.84048418194278 34.208751404812496)"
    "198856","POINT (108.84627615033686 34.205495498912406)"
    "199563","POINT (108.84081270761097 34.208564048548254)"

(2) 路网-线层
'''''''''''''

路网线层文件字段要求如下：

.. csv-table:: 线层字段说明
    :header: "字段名称", "字段类型", "字段说明"
    :widths: 10, 10, 30

    "link_id","int","路段唯一编码"
    "from_node","int","路段拓扑起点节点编号"
    "to_node","int","路段拓扑终点节点编号"
    "dir","int","路段方向，取值为0或者1， 0代表双向通行，1代表通行方向为路段拓扑正向"
    "length","float","路段长度，单位米"
    "geometry","geometry","路段几何线型"
    "其他非必需字段","...","..."



样例数据如下：

.. csv-table:: 线层样例数据
    :header: "link_id", "dir", "length", "from_node", "to_node", "road_name", "geometry"
    :widths: 5, 5,5,5,5,5,40

    "50542","1","379.03","191714","19893","西三环入口","LINESTRING (108.84048418194278 34.208751404812496, 108.8410333043887 34.20538952458989)"
    "50545","1","112.13","170508","63637","西三环入口","LINESTRING (108.841425074665 34.203330912749905, 108.8415703783543 34.20233450491169)"
    "91646","1","120.66","177594","169462","西太公路","LINESTRING (108.84176365682967 34.202564765029564, 108.84160833213731 34.20363712972413)"
    "117776","1","91.19","22765","4290","科技八路","LINESTRING (108.8396462868452 34.20358068920947, 108.84059274796762 34.20380728755708)"
    "117777","1","142.87","4290","92706","科技八路","LINESTRING (108.84059274796762 34.20380728755708, 108.84207500541686 34.2041637658475)"
    "225724","1","126.28","92706","34152","科技八路","LINESTRING (108.84207500541686 34.2041637658475, 108.84337595161946 34.20450390550994)"
    "353809","1","309.67","198856","29974","科技八路辅路","LINESTRING (108.84627615033686 34.205495498912406, 108.84304743483109 34.20477124733548)"
    "353810","1","123.30","29974","82793","科技八路辅路","LINESTRING (108.84304743483109 34.20477124733548, 108.84178453991281 34.204420171642816)"
    "50543","1","232.85","19893","170508","西三环入口","LINESTRING (108.8410333043887 34.20538952458989, 108.84113550636526 34.204842890573545, 108.841425074665 34.203330912749905)"
    "60333","1","131.43","19893","181808","丈八立交","LINESTRING (108.8410333043887 34.20538952458989, 108.84097922452833 34.2053414459058, 108.8409571929787 34.20530941808315, 108.84094718092301 34.205266415141416, 108.84093116775695 34.205121436415766, 108.84088210545373 34.20495040838689, 108.84082903440334 34.20481036268511, 108.84074291369149 34.204649265874245, 108.84062975122784 34.20448312297699, 108.84049555540867 34.20432194107051)"
    "60342","1","114.48","181808","124862","丈八立交","LINESTRING (108.84049555540867 34.20432194107051, 108.84036636411828 34.20419775516095, 108.84024318008004 34.20409657182006, 108.84004387862637 34.203972261359624, 108.83952308374874 34.20369843029777)"
    "72528","1","144.36","44441","68869","科技八路","LINESTRING (108.8435151462407 34.204686083275455, 108.84276803395724 34.20449685714005, 108.842021912175 34.20431362229388)"
    "72530","1","241.31","68869","124862","科技八路","LINESTRING (108.842021912175 34.20431362229388, 108.84045752847501 34.20392001061749, 108.83999080892261 34.20380622377766, 108.83952308374874 34.20369843029777)"
    "91647","1","219.39","169462","91199","西太公路","LINESTRING (108.84160833213731 34.20363712972413, 108.84159129993026 34.20371207446149, 108.84158127801764 34.20379302941826, 108.84129068661863 34.20558291058989)"
    "91650","1","336.01","91199","199563","西太公路","LINESTRING (108.84129068661863 34.20558291058989, 108.8412796652767 34.20563687282872, 108.8412686439326 34.205690835063145, 108.84115642068461 34.20631242560034, 108.84081270761097 34.208564048548254)"
    "117778","1","210.78","92706","145105","丈八立交","LINESTRING (108.84207500541686 34.2041637658475, 108.84246760555624 34.204148454345315, 108.84259079504238 34.204121677386546, 108.84270897833433 34.204073898662514, 108.84278409570048 34.20403104344158, 108.84285420666204 34.203972184904536, 108.84290829376307 34.20390730060347, 108.84296138178485 34.20381142505641, 108.84298842958638 34.20372550103973, 108.84300445983821 34.203650554222975, 108.8430044667493 34.203564583429824, 108.84298844855175 34.20348958118876, 108.84295640699884 34.20340355495798, 108.84291334698771 34.20333950217767, 108.84283823977152 34.203258399651446, 108.84274109807303 34.203189254785585, 108.84262893217804 34.20313507862982, 108.84249973838324 34.20310286525956, 108.84239758378014 34.20309169152201)"
    "117796","1","101.54","145105","169462","丈八立交","LINESTRING (108.84239758378014 34.20309169152201, 108.84226337833424 34.20310245441332, 108.84214018818257 34.20312823114287, 108.84201599437151 34.20317699810311, 108.84191984203596 34.20324080868778, 108.84186074674892 34.20329968553512, 108.84168846217199 34.20355129904852, 108.84166642567236 34.203584249318894, 108.84160833213731 34.20363712972413)"
    "142834","1","137.18","44441","118381","丈八立交","LINESTRING (108.8435151462407 34.204686083275455, 108.84286516861593 34.20465297225673, 108.84270392291693 34.20466868749383, 108.84255369259174 34.20469541771726, 108.8423543849143 34.204749053102546, 108.84220415103883 34.204807771645406, 108.84208596575294 34.20486654570958)"
    "142840","1","109.65","118381","91199","丈八立交","LINESTRING (108.84208596575294 34.20486654570958, 108.84193572856508 34.20495725275265, 108.84187062536941 34.20500012448543, 108.84174241973271 34.205111862398475, 108.84152206339351 34.2053314019811, 108.84138183320681 34.205508095978935, 108.84129068661863 34.20558291058989)"
    "313011","1","185.48","170508","31762","丈八立交","LINESTRING (108.841425074665 34.203330912749905, 108.84138201087228 34.20329884814687, 108.8413549721588 34.20326181330508, 108.84133394278078 34.20322378932678, 108.84130691144021 34.20309478566952, 108.84126886083386 34.20299375316963, 108.84121578539629 34.2029126874992, 108.84113566851988 34.20282657599954, 108.84107557946284 34.2027784867213, 108.84098444236022 34.20272934315392, 108.84090432074107 34.20269821275392, 108.84078013032108 34.202671003329115, 108.84065193124133 34.202670777488386, 108.84052272903759 34.202686544240095, 108.8404205674005 34.20271835309855, 108.84031840430188 34.20276615639653, 108.84024328324365 34.202814007367984, 108.84015714222738 34.20289482758925, 108.8401090614738 34.20296471879859, 108.84007099594207 34.20303962600771)"
    "313030","1","107.96","31762","4290","丈八立交","LINESTRING (108.84007099594207 34.20303962600771, 108.84004995701892 34.20311456333897, 108.84003893335381 34.20319451669712, 108.84004393467363 34.203275498082384, 108.8400609552723 34.203350502775116, 108.8401090222339 34.20345255324469, 108.8401681085395 34.20352763233158, 108.8402271964761 34.2035817184994, 108.84032334095258 34.20365086500884, 108.84044152120677 34.20370005708676, 108.84059274796762 34.20380728755708)"
    "336493","1","268.77","122487","82793","西三环辅路","LINESTRING (108.84210722600966 34.20202954576994, 108.84186570306134 34.20393847725639, 108.84178453991281 34.204420171642816)"
    "336495","1","229.43","82793","166381","西三环辅路","LINESTRING (108.84178453991281 34.204420171642816, 108.84169935963888 34.205036812701614, 108.84162421311767 34.20542354934598, 108.84139277469502 34.20644679433629)"
    "353811","1","175.06","82793","7449","科技八路辅路","LINESTRING (108.84178453991281 34.204420171642816, 108.8409632885549 34.20423679420731, 108.83996876020116 34.20398312458892)"


(3) 点层、线层关联关系
''''''''''''''''''''''''''

按照以上样例数据准备路网文件，shp、geojson等格式都可以。

样例数据在QGIS(或者TransCAD等其他GIS软件)中进行可视化，大概是这个样子：

.. image:: images/sample_net.png
    :align: center

* 线层dir字段与拓扑方向
    线层的箭头方向为拓扑方向(即link层geometry中的折点行进方向)，dir字段所描述的行车方向就是与之关联的，dir为1代表该条link是单向路段，行车方向与拓扑方向一致，dir为0代表该条link是双向路段


* 点层node_id与线层from_node、to_node关联
    线层的箭头方向为拓扑方向(即link层geometry中的折点行进方向)，dir字段所描述的行车方向就是与之关联的，dir为1代表该条link是单向路段，行车方向与拓扑方向一致，dir为0代表该条link是双向路段

.. image:: images/LinkNodeCon.png
    :align: center


-------------------------------------

在本地图匹配包中，使用Net对象来管理路网，用户需要指定Link层和Node层文件路径或者传入link层和node层的GeoDataFrame，便可以创建一个Net对象，这个Net对象是我们开展GPS数据生产、地图匹配的基准Net，这个Net对象提供了很多操作路网的方法，方便我们对路网进行操作。

.. image:: images/create_net.png
    :align: center

-------------------------------------


2.2.2. GPS定位数据
::::::::::::::::::::::::::


GPS数据字段要求如下：

.. csv-table:: GPS数据字段说明
    :header: "字段名称", "字段类型", "字段说明"
    :widths: 15, 15, 40

    "agent_id","string","节点唯一编码"
    "lng","float","经度"
    "lat","float","纬度"
    "time","string","节点坐标几何列"
    "heading","float","航向角,该字段不是必需字段"
    "其他非必需字段","...","..."

样例数据如下：

.. csv-table:: GPS样例数据
    :header: "agent_id", "lng", "lat", "time"
    :widths: 5,10,10,10

    "22413","113.8580665194923","22.774040768110932","2024-01-15 16:00:29"
    "22413","113.85816528930164","22.774241671596673","2024-01-15 16:00:59"
    "22413","113.86015961029372","22.77713838336715","2024-01-15 16:01:29"
    "22413","113.86375221173896","22.779334473598812","2024-01-15 16:02:00"
    "22413","113.864148301839","22.77953193554016","2024-01-15 16:02:29"
    "22413","113.86793876830578","22.78092681645836","2024-01-15 16:02:59"

在本地图匹配包中，使用GpsPointsGdf对象来管理一辆车的一次出行轨迹数据，用户在构建GpsPointsGdf之前应该先对GPS数据做预处理如行程切分，然后使用一个车辆唯一编码agent_id来标注这次出行，GpsPointsGdf提供了很多操作GPS数据的方法

.. image:: images/gps_obj.png
    :align: center

----------------------------------------



3. 依据已有路网生产GPS数据
-----------------------------


3.1. 所需数据
`````````````

本模块只需路网数据作为输入，先依据路网数据初始化一个Net对象，然后初始化一个路径对象和一个Car车辆对象，然后新建一个行程信息收集器对象RouteInfoCollector，即可获取GPS数据。

基本流程为：

.. image:: images/GpsGenGraph.png
    :align: center

----------------------------------------


3.2. 代码示例
`````````````

.. code-block:: python
    :linenos:

    # 1. 从gotrackit导入相关模块Net,Route,Car, RouteInfoCollector,字段名称常量(这一步是固定操作)
    import datetime
    from gotrackit.map.Net import Net
    from gotrackit.generation.GpsGen import Route
    from gotrackit.GlobalVal import NetField, GpsField
    from gotrackit.generation.GpsGen import Car, RouteInfoCollector

    net_field = NetField()
    gps_field = GpsField()


    if __name__ == '__main__':
        # 2. 新建一个路网对象, 并且指定其地理坐标系(shp源文件的crs)以及要使用的投影坐标系
        # 示例为西安的路网, 使用6度带中的EPSG:32649(这个投影坐标系的指定, 用户需要依据自己的数据所在的城市来自定义修改)
        plain_crs = 'EPSG:32649'
        geo_crs = 'EPSG:4326'

        # 这里使用的是西安一个小片区的路网, 我已经提前把路网做好了, 只需指定link层和node层的文件路径(可以去我的GitHub上找到这个数据)
        # weight_field指明使用link图层中的哪一个字段作为路径搜索的权重字段(必须是浮点数类型的字段)
        # 同时传入地理坐标系、平面投影坐标系参数
        my_net = Net(link_path=r'data/input/net/xian/link.shp',
                     node_path=r'data/input/net/xian/node.shp',
                     weight_field='length', geo_crs=geo_crs, plane_crs=plain_crs)

        # 路网对象初始化(一定要做)
        my_net.init_net()

        # 3.新建一个路径route, 用于分配给车辆car作为路径导航的输入
        # 若不指定ft_seq, 则使用o_node -> d_node进行搜路(car对象会自动搜路)获取路径, 若没有指定o_node和d_node则使用随机路径
        # o_node和d_node指的是本次行程的起点节点和终点节点(对应link层和node层构建的Net对象)
        route = Route(net=my_net)

        # 可以使用如下方式指定o_node和d_node
        # route.o_node = 176356
        # route.d_node = 228133

        # 可以使用如下方式指定o_node和d_node
        route.ft_seq = [(137226, 42212), (42212, 21174), (21174, 39617)]


        # 4.新建一个行程信息收集器对象, 对数据进行统一管理
        # 轨迹信息和GPS坐标信息都是平面坐标系, 需要转化为地理坐标系后再进行存储
        data_col = RouteInfoCollector(from_crs=plain_crs, to_crs=geo_crs, convert_prj_sys=True)

        # 5.设置仿真参数, 并且初始化一个车辆实体
        _time_step = 0.1  # 仿真步长, s
        speed_miu = 12.0  # 速度期望值
        speed_sigma = 3.6  # 速度标准差
        save_gap = 5  # 每多少仿真步保存一次车辆真实位置数据
        loc_frequency = 3.0  # 每多少s进行一次GPS定位
        loc_error_sigma = 20.0  # 定位误差标准差(m)
        loc_error_miu = 0.0  # 定位误差标准期望值(m)

        # 使用for循环创建三辆车
        # 出发时间都是datetime.datetime(year=2022, month=5, day=12, hour=16, minute=14, second=0)
        for car_id in [rf'xa_car_{i}' for i in range(0, 3)]:
            # 6.新建车对象, 分配一个车辆ID, 配备一个电子地图net, 且设置仿真参数
            car = Car(net=my_net, time_step=_time_step, route=route,
                      agent_id=car_id, speed_miu=speed_miu, speed_sigma=speed_sigma,
                      loc_frequency=loc_frequency, loc_error_sigma=loc_error_sigma, loc_error_miu=loc_error_miu,
                      start_time=datetime.datetime(year=2022, month=5, day=12, hour=16, minute=14, second=0),
                      save_gap=save_gap)

            # 开始行车
            car.start_drive()

            # 收集数据
            data_col.collect_trajectory(car.get_trajectory_info())
            data_col.collect_gps(car.get_gps_loc_info())

        # 7.存储数据(同时会将结果返回)
        # 指定存储文件类型参数: file_type(geojson或者csv)
        # 指定存储文件目录参数: out_fldr
        # 指定存储文件名称(不带后缀): file_name
        trajectory_gdf = data_col.save_trajectory(file_type='geojson', out_fldr=r'./data/output/trajectory/', file_name='test_xa')
        gps_gdf = data_col.save_gps_info(file_type='geojson', out_fldr=r'./data/output/gps/', file_name='test_xa')
        mix_gdf = data_col.save_mix_info(file_type='geojson', out_fldr=r'./data/output/mix/', file_name='test_xa')


4. 从路径规划接口获取路网
-------------------------

该模块功能已经开发完毕，测试中，尚未上线......


5. 地图匹配
----------------------------

5.1. 所需数据
`````````````

使用地图匹配接口，你需要准备路网数据和GPS数据。

基本流程如下：


.. image:: images/MatchGraph.png
    :align: center

----------------------------------------


5.2. 代码示例
`````````````

.. code-block:: python
    :linenos:

    # 1. 从gotrackit导入相关模块Net, GpsPointsGdf, HiddenMarkov, VisualizationCombination, 字段名称常量(这一步是固定操作)
    import geopandas as gpd
    from gotrackit.map.Net import Net
    from gotrackit.gps.LocGps import GpsPointsGdf
    from gotrackit.model.Markov import HiddenMarkov
    from gotrackit.GlobalVal import NetField, GpsField
    from gotrackit.visualization import VisualizationCombination

    net_field = NetField()
    gps_field = GpsField()


    if __name__ == '__main__':
        # 2. 新建一个路网对象, 并且指定其地理坐标系(shp源文件的crs)以及要使用的投影坐标系
        # 示例为西安的路网, 使用6度带中的EPSG:32649(这个投影坐标系的指定, 用户需要依据自己的数据所在的城市来自定义修改)
        plain_crs = 'EPSG:32649'
        geo_crs = 'EPSG:4326'

        # 这里使用的是西安一个小片区的路网, 我已经提前把路网做好了, 只需指定link层和node层的文件路径(可以去我的GitHub上找到这个数据)
        # weight_field指明使用link图层中的哪一个字段作为路径搜索的权重字段(必须是浮点数类型的字段)
        # 同时传入地理坐标系、平面投影坐标系参数
        my_net = Net(link_path=r'data/input/net/xian/link.shp',
                     node_path=r'data/input/net/xian/node.shp',
                     weight_field='length', geo_crs=geo_crs, plane_crs=plain_crs)

        # 路网对象初始化(一定要做)
        my_net.init_net()

        # 3.读取GPS文件(这一步不固定, 用户可以在这之前去做很多的清洗操作)
        gps_df = gpd.read_file(r'./data/output/gps/test_xa.geojson')

        # 4.初始化一个匹配结果管理器
        vc = VisualizationCombination(use_gps_source=True)

        for agent_id, gps_df in gps_df.groupby(gps_field.AGENT_ID_FIELD):
            _gps_df = gps_df[gps_df[gps_field.AGENT_ID_FIELD] == agent_id].copy()
            _gps_df.reset_index(inplace=True, drop=True)

            # 为该车的该次行程创建一个GpsPointsGd对象
            gps_obj = GpsPointsGdf(gps_points_df=_gps_df, time_format="%Y-%m-%d %H:%M:%S", buffer=100.0,
                                   geo_crs=geo_crs, plane_crs=plain_crs, max_increment_times=1)

            # 降频处理(如有需要)
            gps_obj.lower_frequency(n=2)

            # 做一次滑动窗口平均(如有需要)
            # gps_obj.rolling_average(window=2)

            # 5.依据当前的GPS数据(源数据)创建一个子网络
            sub_net = my_net.create_computational_net(gps_array_buffer=gps_obj.get_gps_array_buffer(buffer=200.0))

            # 6. 初始化一个隐马尔可夫模型
            hmm_obj = HiddenMarkov(net=sub_net, gps_points=gps_obj, beta=31.2, gps_sigma=10.0, search_method='single')
            hmm_obj.generate_markov_para()  # 计算匹配参数
            hmm_obj.solve()  # 求解

            # 7. 获取匹配结果
            # 'agent_id', 'time', 'heading', 'lng', 'lat', 'geometry', 'seq', 'origin_seq', 'single_link_id', 'link_id', 'dir', 'from_node','to_node', 'sub_seq'
            match_res_df = hmm_obj.acquire_res()

            # 8. 将结果放到可视化收集器里面, 方便可视化输出
            # vc.collect_hmm(hmm_obj)




6. 匹配结果可视化
----------------------------


.. image:: images/visualization.png
    :align: center

----------------------------------------


.. code-block:: python
    :linenos:

    vc.visualization(zoom=15, out_fldr=r'./data/output/match_visualization/', file_name='testXA')

